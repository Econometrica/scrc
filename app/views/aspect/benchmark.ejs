<div class='container'>
	<%- partial('site.ejs', {site: site})%>

	<h3>Benchmark Chart</h3>
	
	<h4>DRG: <%= drg.name %></h4>
	<% if(drg.description) {%>
	<%= drg.description %>
	<%}%>
	Subpopulation: <%= subpopulation.name %>
	<br/>
	<div class='well'>
		<h4>Period: <%= year %> Q<%= quarter %></h4>
	</div>
		
	<hr/>
	
	<table>
		<tr>
			<td><div id="container1" style="height: 600px; min-width: 600px"></div></td>
			<td><div id="container2" style="height: 600px; min-width: 600px"></div></td>
		</tr>
		<tr>
			<td><div id="container3" style="height: 600px; min-width: 600px"></div></td>
			<td><div id="container4" style="height: 600px; min-width: 600px"></div></td>
		</tr>
	</table>
</div>

<hr/>

<div class='container'>
<div id="disqus_thread"></div>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
	<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

<!-- DISQUS -->
<script type="text/javascript">
	var disqus_shortname = 'scrsproto';

	(function() {
		var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
		dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	})();
</script>

<script src="/js/Highstock-1.3.4/js/highstock.js"></script>
<script src="/js/Highstock-1.3.4/js/modules/exporting.js"></script>
	
<script type="text/javascript">
var sites;
var graphs 		= [{}, {}, {}, {}];
var categories 	= [];				// really the site names

var sites = <%- JSON.stringify(sites) %>;

function GraphMeasure(index, measure, callback ) {
	var g = graphs[index];
			
	var query = '<%= host %>/site/bsdmp/<%= site.id %>/<%= drg.id %>/'
	query += measure.measure_id+'/<%= subpopulation.id %>/<%= year %>/<%= quarter %>';
	
	//console.log('query:', query)
	
		$.ajax({
			type: 'GET',
			url: query,
			async: false 
		})
		.success( function(results) {
			//console.log('succeeded...');
			g.seriesOptions = results
			createChart( g.seriesOptions, callback );
		})
		.fail(function(jqxhr, textStatus, error ) { 
			var err = textStatus + ', ' + error;
			console.log( "Request Failed: " + err);
		});
	

	// create the chart when all data is loaded
	function createChart(seriesOptions, sites, callback) {

		var container_index = parseInt(index)+1
		var container 		= 'container'+container_index;
		
		//console.log('createChart in container:'+container);
		
		$('#'+container).highcharts( {
			chart: {
				renderTo: container,
				alignTicks: true,
				borderWidth: 0,
				height: 600,
				resetZoomButton: {
					position: {
						align: 'right',
						verticalAlign: 'top'
					}
				},
				shadow: true,
				spacingTop: 10,
				spacingRight: 20,
				spacingBottom: 50,
				spacingLeft: 20,
				type: "column",
				width: 600,
				zoomType: 'x'
			},
			subtitle: {
				align: 'center',
				text: measure.description,
				style: {
					fontSize: '9px',
					width: '200px'
				},
				verticalAlign: 'bottom'
			},
			title: {
				text: measure.name
			},
			legend: {
					align: 'center',
					enabled: true,
					itemStyle: {
						fontSize: '9px',
						width: '175px'
					},
					layout: 'horizontal',
					verticalAlign: 'bottom'
			},
			credits: {
				enabled: false
			},
			xAxis: {
				alternateGridColor: '#FAFAFA',
				labels: {
					style: {
						fontSize: '9px',
						width: '175px'
					},
					categories: categories
				}
			},
			yAxis: {
				title: {
					text: measure.units
				}
			},
			tooltip: {
				formatter: function() {
					return '<b>'+ findSite(this.x, sites) +'</b><br/>'+
						this.series.name +': '+ this.y +'<br/>';
				}
			},
			plotOptions: {
				column: {
					stacking: 'normal'
					//,dataLabels: {
					//	enabled: true,
					//	color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
					//}
				}
			},

			series: seriesOptions
		});
		// done
		if( callback) { callback(null); }
	}
};

function findSite( i) {
	//console.log("find site:", i)
	if( categories[i] != undefined ) return categories[i];
	
	for( s in sites) {
		//console.log( sites[s].id, sites[s].name )
		if( sites[s].id == i ) {
			categories[i] = sites[s].name;
			return sites[s].name;
		}
	}
	categories[i] = "site "+i
	return categories[i];
}

$(function() {
	var measures 	= <%- JSON.stringify(measures) %>;
	sites			= <%- JSON.stringify(sites) %>; 

	for( m in measures ) {
			//console.log("doing graph:",m);
			GraphMeasure(m, measures[m], function(err) {
		});
	}
})

analytics.track('DRG Benchmark Chart', {
	drgId:				<%= drg.id %>,
	drgName:			"<%= drg.name %>",
	subPopulationId: 	<%= subpopulation.id %>,
	subPopulationName: "<%= subpopulation.name %>",
    Year:	 			<%= year %>,
    Quarter:			<%= quarter %>
});
</script>